{"version":3,"file":"brand-config-client.js","sourceRoot":"./","sources":["apps/shard-config/clients/brand-config/src/client/brand-config-client.ts"],"names":[],"mappings":"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","sourcesContent":["import { CacheOptions } from \"../interfaces/cache-options\";\nimport {\n  GetBrandAliasQuery,\n  GetBrandAliasQueryVariables,\n  GetPrivateConfigQuery,\n  GetPrivateConfigQueryVariables,\n  GetPublicConfigQuery,\n  GetPublicConfigQueryVariables,\n  GetRoutingConfigQuery,\n  GetRoutingConfigQueryVariables,\n} from \"../models/typed-document-nodes\";\nimport {\n  ApolloClient,\n  ApolloLink,\n  ApolloQueryResult,\n  gql,\n  HttpLink,\n} from \"@apollo/client/core\";\nimport { AuthOptions, createAuthLink } from \"aws-appsync-auth-link\";\nimport {\n  InvalidationPolicyCache,\n  RenewalPolicy,\n} from \"@nerdwallet/apollo-cache-policies\";\nimport { defaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { createSubscriptionHandshakeLink } from \"aws-appsync-subscription-link\";\nimport fetch from \"cross-fetch\";\n\nexport class BrandConfigClient {\n  private readonly appSyncClient: ApolloClient<any>;\n\n  constructor(endpoint: string, private cacheOptions: CacheOptions) {\n    const url = endpoint;\n    const region = process.env.AWS_REGION;\n    const auth: AuthOptions = {\n      type: \"AWS_IAM\" as const,\n      credentials: defaultProvider(),\n    };\n\n    const link = ApolloLink.from([\n      createAuthLink({ url, region, auth }),\n      createSubscriptionHandshakeLink(\n        { url, region, auth },\n        new HttpLink({ uri: url, fetch })\n      ),\n    ]);\n\n    this.appSyncClient = new ApolloClient({\n      link,\n      cache: new InvalidationPolicyCache({\n        invalidationPolicies: {\n          timeToLive: cacheOptions.stdTTL ?? 30000,\n          renewalPolicy: RenewalPolicy.AccessAndWrite,\n        },\n      }),\n      defaultOptions: {\n        query: {\n          fetchPolicy: cacheOptions.enabled ? \"cache-first\" : \"no-cache\",\n        },\n      },\n    });\n  }\n\n  async getPrivateConfig(brandId: string): Promise<GetPrivateConfigQuery> {\n    const variables: GetPrivateConfigQueryVariables = {\n      brandId: brandId,\n    };\n\n    const brandPrivateConfigResponse =\n      await this.appSyncClient.query<GetPrivateConfigQuery>({\n        query: this.getBrandPrivateConfigQuery(),\n        variables,\n      });\n\n    this.validateGraphQLResponse(brandPrivateConfigResponse);\n\n    return brandPrivateConfigResponse.data;\n  }\n\n  async getRoutingConfig(etld: string): Promise<GetRoutingConfigQuery> {\n    const variables: GetRoutingConfigQueryVariables = {\n      etld: etld,\n    };\n\n    const brandRoutingConfigResponse =\n      await this.appSyncClient.query<GetRoutingConfigQuery>({\n        query: this.getBrandRoutingConfigQuery(),\n        variables,\n      });\n\n    this.validateGraphQLResponse(brandRoutingConfigResponse);\n\n    return brandRoutingConfigResponse.data;\n  }\n\n  async getPublicConfig(brandId: string): Promise<GetPublicConfigQuery> {\n    const variables: GetPublicConfigQueryVariables = {\n      brandId: brandId,\n    };\n\n    const brandPublicConfigResponse =\n      await this.appSyncClient.query<GetPublicConfigQuery>({\n        query: this.getBrandPublicConfigQuery(),\n        variables,\n      });\n\n    this.validateGraphQLResponse(brandPublicConfigResponse);\n\n    return brandPublicConfigResponse.data;\n  }\n\n  async getBrandForAlias(\n    aliasId: string,\n    aliasType: string\n  ): Promise<GetBrandAliasQuery> {\n    const COMPOUND_SEPERATOR = \"#\";\n    const compoundId = `${aliasType}${COMPOUND_SEPERATOR}${aliasId}`;\n\n    const getBrandAliasQuery = this.getBrandAliasQuery();\n    const variables: GetBrandAliasQueryVariables = {\n      aliasId: compoundId,\n    };\n\n    const brandAliasResponse =\n      await this.appSyncClient.query<GetBrandAliasQuery>({\n        query: getBrandAliasQuery,\n        variables,\n      });\n\n    this.validateGraphQLResponse(brandAliasResponse);\n\n    return brandAliasResponse.data;\n  }\n\n  private validateGraphQLResponse<T>(response: ApolloQueryResult<T>) {\n    if (response?.errors?.find((e) => e?.message?.length > 0)) {\n      const errorMessage = `Query failed with errors: ${JSON.stringify(\n        response?.errors\n      )}`;\n\n      console.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }\n\n  private getBrandPrivateConfigQuery = () => gql`\n    query getPrivateConfig($brandId: ID!) {\n      getPrivateConfig(brandId: $brandId) {\n        brand {\n          brandId\n          etld\n          tenantId\n        }\n        identityProvider {\n          brandId\n          clientId\n          clientSecret\n          endpoint\n          provider\n          region\n          userPoolId\n        }\n        externalProviders {\n          brandId\n          type\n          providerConfigs {\n            key\n            value\n          }\n        }\n      }\n    }\n  `;\n\n  private getBrandRoutingConfigQuery = () =>\n    gql`\n      query getRoutingConfig($etld: String!) {\n        getRoutingConfig(etld: $etld) {\n          brand {\n            brandId\n            etld\n            tenantId\n          }\n          privateEndpoints {\n            brandId\n            endpointScope\n            token\n            type\n            url\n          }\n          publicEndpoints {\n            brandId\n            endpointScope\n            token\n            type\n            url\n          }\n        }\n      }\n    `;\n\n  private getBrandPublicConfigQuery = () =>\n    gql`\n      query getPublicConfig($brandId: ID!) {\n        getPublicConfig(brandId: $brandId) {\n          brand {\n            brandId\n            etld\n            tenantId\n          }\n          featureFlags {\n            brandId\n            enable\n            name\n            description\n          }\n          configMap {\n            brandId\n            type\n            items {\n              key\n              value\n            }\n          }\n        }\n      }\n    `;\n\n  private getBrandAliasQuery = () =>\n    gql`\n      query getBrandAlias($aliasId: ID!) {\n        getBrandAlias(aliasId: $aliasId) {\n          aliasId\n          brandId\n        }\n      }\n    `;\n}\n"]}